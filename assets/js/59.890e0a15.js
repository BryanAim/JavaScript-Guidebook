(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{447:function(t,v,e){"use strict";e.r(v);var a=e(0),_=Object(a.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"比较运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),e("p",[t._v("比较运算符比较它的操作数并返回一个基于表达式是否为 "),e("code",[t._v("true")]),t._v(" 的逻辑值。")]),t._v(" "),e("p",[t._v("比较运算符分为"),e("strong",[t._v("关系运算符（Relational Operators）"),e("strong",[t._v("和")]),t._v("等值运算符（Equality Operators）")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("操作数可以是数字，字符串，逻辑，对象值。")]),t._v(" "),e("li",[t._v("字符串比较是基于标准的字典顺序，使用 Unicode 值。")]),t._v(" "),e("li",[t._v("在多数情况下，如果两个操作数不是相同的类型， JavaScript 会尝试转换它们为恰当的类型来比较。这种行为通常发生在数字作为操作数的比较。")]),t._v(" "),e("li",[t._v("类型转换的例外是使用 "),e("code",[t._v("===")]),t._v(" 和 "),e("code",[t._v("!==")]),t._v(" 操作符，它们会执行严格的相等和不相等比较。这些运算符不会在检查相等之前转换操作数的类型。下面的表格描述了该示例代码中的各比较运算符。")])]),t._v(" "),e("h2",{attrs:{id:"关系运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[t._v("#")]),t._v(" 关系运算符")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("运算符")]),t._v(" "),e("th",[t._v("描述")]),t._v(" "),e("th",[t._v("返回 "),e("code",[t._v("true")]),t._v(" 的示例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("大于 "),e("code",[t._v(">")])]),t._v(" "),e("td",[t._v("左边的操作数大于右边的操作数返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("b > a")])])]),t._v(" "),e("tr",[e("td",[t._v("大于等于 "),e("code",[t._v(">=")])]),t._v(" "),e("td",[t._v("左边的操作数大于或等于右边的操作数返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("b >= a")]),t._v(" "),e("code",[t._v("a >= 1")])])]),t._v(" "),e("tr",[e("td",[t._v("小于 "),e("code",[t._v("<")])]),t._v(" "),e("td",[t._v("左边的操作数小于右边的操作数返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("a < b")]),t._v(" "),e("code",[t._v("1 < 2")])])]),t._v(" "),e("tr",[e("td",[t._v("小于等于 "),e("code",[t._v("<=")])]),t._v(" "),e("td",[t._v("左边的操作数小于或等于右边的操作数返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("a <= b")]),t._v(" "),e("code",[t._v("b <= 5")])])])])]),t._v(" "),e("h2",{attrs:{id:"等值运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#等值运算符"}},[t._v("#")]),t._v(" 等值运算符")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("运算符")]),t._v(" "),e("th",[t._v("描述")]),t._v(" "),e("th",[t._v("返回 "),e("code",[t._v("true")]),t._v(" 的示例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("等于 "),e("code",[t._v("==")])]),t._v(" "),e("td",[t._v("如果两边操作数相等时返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("a == 1")]),t._v(" "),e("code",[t._v("'1' == 2")]),t._v(" "),e("code",[t._v("1 == '1'")])])]),t._v(" "),e("tr",[e("td",[t._v("不等于 "),e("code",[t._v("!=")])]),t._v(" "),e("td",[t._v("如果两边操作数不相等时返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("a != 2")]),t._v(" "),e("code",[t._v("b != '1'")])])]),t._v(" "),e("tr",[e("td",[t._v("全等 "),e("code",[t._v("===")])]),t._v(" "),e("td",[t._v("两边操作数相等且类型相同时返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("a === 1")])])]),t._v(" "),e("tr",[e("td",[t._v("不全等 "),e("code",[t._v("!==")])]),t._v(" "),e("td",[t._v("两边操作数不相等或类型不同时返回 "),e("code",[t._v("true")])]),t._v(" "),e("td",[e("code",[t._v("a !== '1'")]),t._v(" "),e("code",[t._v("1 !== '1'")])])])])]),t._v(" "),e("h3",{attrs:{id:"抽象相等比较算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象相等比较算法"}},[t._v("#")]),t._v(" 抽象相等比较算法")]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("若 Type(x) 与 Type(y) 相同，则\n"),e("ol",[e("li",[t._v("若 Type(x) 为 Undefined，返回 true")]),t._v(" "),e("li",[t._v("若 Type(x) 为 Null，返回 true")]),t._v(" "),e("li",[t._v("若 Type(x) 为 Number，则\n"),e("ol",[e("li",[t._v("若 x 为 NaN，返回 false")]),t._v(" "),e("li",[t._v("若 y 为 NaN，返回 false")]),t._v(" "),e("li",[t._v("若 x 与 y 为相等数值，返回 true")]),t._v(" "),e("li",[t._v("若 x 为 +0 且 y 为 -0，返回 true")]),t._v(" "),e("li",[t._v("若 x 为 -0 且 y 为 +0，返回 true")]),t._v(" "),e("li",[t._v("返回 false")])])]),t._v(" "),e("li",[t._v("若 Type(x) 为 String，则当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true。否则，返回 false。")]),t._v(" "),e("li",[t._v("若 Type(x) 为 Boolean，当 x 和 y 为同为 true 或者同为 false 时返回 true。否则，返回 false。")]),t._v(" "),e("li",[t._v("当 x 和 y 为引用用一对象时返回 true。否则，返回 false。")])])]),t._v(" "),e("li",[t._v("若 x 为 null 且 y 为 undefined，返回 true")]),t._v(" "),e("li",[t._v("若 x 为 undefined 且 y 为 null，返回 true")]),t._v(" "),e("li",[t._v("若 Type(x) 为 Number 且 Type(y) 为 String，返回比较 "),e("code",[t._v("x == ToNumber(y)")]),t._v(" 的结果")]),t._v(" "),e("li",[t._v("若 Type(x) 为 String 且 Type(y) 为 Number，返回比较 "),e("code",[t._v("ToNumber(x) == y")]),t._v(" 的结果")]),t._v(" "),e("li",[t._v("若 Type(x) 为 Boolean，返回比较 "),e("code",[t._v("ToNumber(x) == y")]),t._v(" 的结果")]),t._v(" "),e("li",[t._v("若 Type(y) 为 Boolean，返回比较 "),e("code",[t._v("x == ToNumber(y)")]),t._v(" 的结果")]),t._v(" "),e("li",[t._v("若 Type(x) 为 String 或 Number，且 Type(y) 为 Object，返回比较 "),e("code",[t._v("x == ToPrimitive(y)")]),t._v(" 的结果")]),t._v(" "),e("li",[t._v("若 Type(x) 为 Object 且 Type(y) 为 String 或 Number，返回比较 "),e("code",[t._v("ToPrimitive(x) == y")]),t._v(" 的结果")]),t._v(" "),e("li",[t._v("返回 false")])])]),t._v(" "),e("p",[t._v("⚠️ 按以上相等之定义：")]),t._v(" "),e("ul",[e("li",[t._v("字符串比较可以按这种方式强制执行："),e("code",[t._v("'' + a == '' + b")])]),t._v(" "),e("li",[t._v("数值比较可以按这种方式强制执行："),e("code",[t._v("+a == +b")])]),t._v(" "),e("li",[t._v("布尔值比较可以按这种方式强制执行："),e("code",[t._v("!a == !b")])])]),t._v(" "),e("p",[t._v("⚠️ 等值比较操作保证以下不变：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("A !== B")]),t._v(" 等价于 "),e("code",[t._v("!(A == B)")])]),t._v(" "),e("li",[e("code",[t._v("A == B")]),t._v(" 等价于 "),e("code",[t._v("B == A")]),t._v("，除了 A 与 B 的执行顺序。")])]),t._v(" "),e("p",[t._v("⚠️ 相等运算符不总是传递的。例如，两个不同的 String 对象，都表示相同的字符串值；"),e("code",[t._v("==")]),t._v(" 运算符认为每个 "),e("code",[t._v("String")]),t._v(" 对象都与字符串值相等，但是两个字符串对象互不相等。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("new String('a') == 'a'")]),t._v(" 和 "),e("code",[t._v("'a' == new String('a')")]),t._v(" 皆为 "),e("code",[t._v("true")])]),t._v(" "),e("li",[e("code",[t._v("new String('a') == new String('a')")]),t._v(" 为 "),e("code",[t._v("false")])])]),t._v(" "),e("p",[t._v("字符串比较使用的方式是简单地检测字符编码单元序列是否相同。不会做更复杂的、基于语义的字符或者字符串相等的定义以及 Unicode 规范中定义的 collating order。所以 Unicode 标准中认为相等的 String 值可能被检测为不等。实际上这一算法认为两个字符串已经是经过规范化的形式。")]),t._v(" "),e("h3",{attrs:{id:"引用数据类型间比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型间比较"}},[t._v("#")]),t._v(" 引用数据类型间比较")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("b")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),e("p",[t._v("当我们访问引用数据类型（对象/数组/函数 .etc）的值时，首先从栈中获得该对象的"),e("strong",[t._v("地址指针")]),t._v("，然后再从"),e("strong",[t._v("堆内存")]),t._v("中取得所需的数据。")]),t._v(" "),e("p",[t._v("变量 "),e("code",[t._v("a")]),t._v(" 实际保存的是指向堆内存中对象的一个指针，而变量 "),e("code",[t._v("b")]),t._v(" 保存的是指向堆内存中的另一个对象的指针，虽然这两个对象的值时一样的，但它们是独立的两个对象，占了两份内存空间，所以它们互不相等。")]),t._v(" "),e("p",[t._v("而当将一个为引用数据类型的值的变量赋值给另一个变量时，即拷贝了前者的内存空间的地址指针，因此它们都指向堆内存中同一个对象。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" y\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])])}),[],!1,null,null,null);v.default=_.exports}}]);