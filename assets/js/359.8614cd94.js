(window.webpackJsonp=window.webpackJsonp||[]).push([[359],{409:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"regexp-prototype-test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[t._v("#")]),t._v(" RegExp.prototype.test()")]),t._v(" "),e("p",[e("code",[t._v("test()")]),t._v(" 方法执行一个检索，用来测试正则表达式与指定的字符串是否匹配。")]),t._v(" "),e("h2",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("regExpObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("regExpObject")])]),t._v(" "),e("td",[e("code",[t._v("RegExp")]),t._v(" 类型")]),t._v(" "),e("td",[t._v("匹配的正则表达式。")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("str")])]),t._v(" "),e("td",[e("code",[t._v("String")]),t._v(" 类型")]),t._v(" "),e("td",[t._v("指定的字符串。将在该字符串中执行搜索。")])])])]),t._v(" "),e("p",[t._v("如果正则表达式与指定的字符串匹配 ，返回 "),e("code",[t._v("true")]),t._v("；否则 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("ul",[e("li",[t._v("值得注意的是，每次执行"),e("code",[t._v("test()")]),t._v("函数都只查找最多一个匹配，如果找到就立即返回 "),e("code",[t._v("true")]),t._v("，否则返回 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("li",[t._v("如果为正则表达式设置了全局标志 "),e("code",[t._v("g")]),t._v("，"),e("code",[t._v("test()")]),t._v("函数仍然只查找最多一个匹配，不过我们再次调用该对象的 "),e("code",[t._v("test()")]),t._v(" 函数就可以查找下一个匹配。")])]),t._v(" "),e("p",[t._v("其原因是：如果 "),e("code",[t._v("regExpObject")]),t._v(" 带有全局标志 "),e("code",[t._v("g")]),t._v("，"),e("code",[t._v("test()")]),t._v(" 函数不是从字符串的开头开始查找，而是从属性 "),e("code",[t._v("regExpObject.lastIndex")]),t._v(" 所指定的索引处开始查找。该属性值默认为 0，所以第一次仍然是从字符串的开头查找。当找到一个匹配时，"),e("code",[t._v("test()")]),t._v(" 函数会将 "),e("code",[t._v("regExpObject.lastIndex")]),t._v(" 的值改为字符串中本次匹配内容的最后一个字符的下一个索引位置。当再次执行 "),e("code",[t._v("test()")]),t._v(" 函数时，将会从该索引位置处开始查找，从而找到下一个匹配。")]),t._v(" "),e("p",[t._v("因此，当我们使用 "),e("code",[t._v("test()")]),t._v(" 函数执行了一次匹配之后，如果想要重新使用 "),e("code",[t._v("test()")]),t._v(" 函数"),e("strong",[t._v("从头开始")]),t._v("查找，则需要手动将 "),e("code",[t._v("regExpObject.lastIndex")]),t._v(" 的值重置为 0。如果 "),e("code",[t._v("test()")]),t._v(" 函数再也找不到可以匹配的文本时，该函数会自动把 "),e("code",[t._v("regExpObject.lastIndex")]),t._v(" 属性重置为 0。")]),t._v(" "),e("h2",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("h3",{attrs:{id:"标准示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准示例"}},[t._v("#")]),t._v(" 标准示例")]),t._v(" "),e("p",[t._v('一个简单的例子，测试 "hello" 是否包含在字符串的最开始，返回布尔值。')]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^hello/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),e("h3",{attrs:{id:"当设置全局标志的正则使用-test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#当设置全局标志的正则使用-test"}},[t._v("#")]),t._v(" 当设置全局标志的正则使用 "),e("code",[t._v("test()")])]),t._v(" "),e("p",[t._v("如果正则表达式设置了全局标志，"),e("code",[t._v("test()")]),t._v(" 的执行会改变正则表达式 "),e("code",[t._v("lastIndex")]),t._v("属性。连续的执行 "),e("code",[t._v("test()")]),t._v(" 方法，后续的执行将会从 "),e("code",[t._v("lastIndex")]),t._v(" 处开始匹配字符串，("),e("code",[t._v("exec()")]),t._v(" 同样改变正则本身的 "),e("code",[t._v("lastIndex")]),t._v(" 属性值).")]),t._v(" "),e("p",[t._v("下面的实例表现了这种行为：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/foo/g")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// regex.lastIndex is at 0")]),t._v("\nregex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// regex.lastIndex is now at 3")]),t._v("\nregex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);