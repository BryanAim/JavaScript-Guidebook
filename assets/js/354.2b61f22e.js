(window.webpackJsonp=window.webpackJsonp||[]).push([[354],{414:function(t,r,a){"use strict";a.r(r);var e=a(0),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"arraybuffer-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-对象"}},[t._v("#")]),t._v(" ArrayBuffer 对象")]),t._v(" "),a("p",[a("code",[t._v("ArrayBuffer")]),t._v(" 对象用来表示通用的、固定长度的原始二进制数据缓冲区。"),a("code",[t._v("ArrayBuffer")]),t._v(" 不能直接操作，而是要通过类型数组对象 或 "),a("code",[t._v("DataView")]),t._v(" 对象来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。")]),t._v(" "),a("p",[t._v("JavaScript 中的 Array 类型，因为有很多功能，而且是不限制类型的，或者它还可能是稀疏的。而如果你从 XHR、FileAPI、Canvas 等各种地方，读取了一大串字节流，如果用 JavaScript 里的 Array 去存储，不仅浪费空间且低效。于是为了配合这些新的 API，增强 JavaScript 的二进制处理能力，就有了 ArrayBuffer。")]),t._v(" "),a("p",[t._v("ArrayBuffer 简单来说就是一片内存，但是你不能（也不方便）直接访问它里面的字节。而要访问 ArrayBuffer，则需要通过 Typed Array 类型引用。（可以将 ArrayBuffer 理解为"),a("strong",[t._v("带类型的高速数组")]),t._v("或"),a("strong",[t._v("类型化数组")]),t._v("）")]),t._v(" "),a("p",[t._v("使用场景：上传图片读取和显示、Canvas 转换图片下载、WebGL 等")]),t._v(" "),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("length")])]),t._v(" "),a("td",[a("code",[t._v("Number")]),t._v(" 类型")]),t._v(" "),a("td",[t._v("要创建的 "),a("code",[t._v("ArrayBuffer")]),t._v(" 的大小，单位为字节。")])])])]),t._v(" "),a("p",[t._v("一个指定大小的 "),a("code",[t._v("ArrayBuffer")]),t._v(" 对象，其内容被初始化为 0。")]),t._v(" "),a("h2",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),a("p",[a("code",[t._v("ArrayBuffer")]),t._v(" 构造函数用来创建一个指定字节长度的 "),a("code",[t._v("ArrayBuffer")]),t._v(" 对象。")]),t._v(" "),a("p",[a("strong",[t._v("以现有数据获取 ArrayBuffer")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Appendix.3A_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 Base64 字符串"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader#readAsArrayBuffer()",target:"_blank",rel:"noopener noreferrer"}},[t._v("从本地文件"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("h3",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("ArrayBuffer.length")])]),t._v(" "),a("td",[t._v("ArrayBuffer 构造函数的 length 属性，其值为 1。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("get ArrayBuffer[@@species]")])]),t._v(" "),a("td",[t._v("返回 ArrayBuffer 的构造函数。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ArrayBuffer.prototype")])]),t._v(" "),a("td",[t._v("通过 ArrayBuffer 的原型对象可以为所有 ArrayBuffer 对象添加属性。")])])])]),t._v(" "),a("h3",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("ArrayBuffer.isView(arg)")])]),t._v(" "),a("td",[t._v("如果参数是 ArrayBuffer 的视图实例则返回 "),a("code",[t._v("true")]),t._v("，例如 类型数组对象 或 "),a("code",[t._v("DataView")]),t._v(" 对象；否则返回 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ArrayBuffer.transfer(oldBuffer [, newByteLength]);")])]),t._v(" "),a("td",[t._v("返回一个新的 ArrayBuffer 对象，其内容取自 "),a("code",[t._v("oldBuffer")]),t._v(" 中的数据，并且根据 "),a("code",[t._v("newByteLength")]),t._v(" 的大小对数据进行截取或补 0。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ArrayBuffer.slice()")])]),t._v(" "),a("td",[t._v("和 "),a("code",[t._v("ArrayBuffer.prototype.slice()")]),t._v(" 功能相同。")])])])]),t._v(" "),a("h2",{attrs:{id:"原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),a("h3",{attrs:{id:"属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("ArrayBuffer.prototype.constructor")])]),t._v(" "),a("td",[t._v("指定函数，它创建一个对象的原型。其初始值是标准 ArrayBuffer 内置构造函数。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ArrayBuffer.prototype.byteLength")])]),t._v(" "),a("td",[t._v("数组的字节大小。在数组创建时确定，并且不可变更。"),a("strong",[t._v("只读")]),t._v("。")])])])]),t._v(" "),a("h3",{attrs:{id:"方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("ArrayBuffer.prototype.slice()")])]),t._v(" "),a("td",[t._v("返回一个新的 "),a("code",[t._v("ArrayBuffer")]),t._v(" ，它的内容是这个 "),a("code",[t._v("ArrayBuffer")]),t._v(" 的字节副本，从 "),a("code",[t._v("begin")]),t._v("（包括），到 "),a("code",[t._v("end")]),t._v("（不包括）。如果 "),a("code",[t._v("begin")]),t._v(" 或 "),a("code",[t._v("end")]),t._v(" 是负数，则指的是从数组末尾开始的索引，而不是从头开始。")])])])]),t._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("h3",{attrs:{id:"标准示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准示例"}},[t._v("#")]),t._v(" 标准示例")]),t._v(" "),a("p",[t._v("下面的例子创建了一个 8 字节的缓冲区，并使用一个 "),a("code",[t._v("Int32Array")]),t._v(" 来引用它：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" view "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int32Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"视图生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图生成"}},[t._v("#")]),t._v(" 视图生成")]),t._v(" "),a("p",[t._v("ArrayBuffer 作为内存区域，可以存放多种类型的数据。不同数据有不同的存储方式，这就叫做"),a("strong",[t._v("视图")]),t._v("。")]),t._v(" "),a("p",[t._v("目前，JavaScript 提供以下类型的视图：")]),t._v(" "),a("ul",[a("li",[t._v("Int8Array：8 位有符号整数，长度 1 个字节。")]),t._v(" "),a("li",[t._v("Uint8Array：8 位无符号整数，长度 1 个字节。")]),t._v(" "),a("li",[t._v("Int16Array：16 位有符号整数，长度 2 个字节。")]),t._v(" "),a("li",[t._v("Uint16Array：16 位无符号整数，长度 2 个字节。")]),t._v(" "),a("li",[t._v("Int32Array：32 位有符号整数，长度 4 个字节。")]),t._v(" "),a("li",[t._v("Uint32Array：32 位无符号整数，长度 4 个字节。")]),t._v(" "),a("li",[t._v("Float32Array：32 位浮点数，长度 4 个字节。")]),t._v(" "),a("li",[t._v("Float64Array：64 位浮点数，长度 8 个字节。")])]),t._v(" "),a("p",[t._v("每一种视图都有一个 BYTES_PER_ELEMENT 常数，表示这种数据类型占据的字节数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Int8Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BYTES_PER_ELEMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nUint8Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BYTES_PER_ELEMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n")])])]),a("p",[t._v("每一种视图都是一个构造函数，有多种方法可以生成。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器控制台输出：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Int32Array\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Int32Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("native code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);