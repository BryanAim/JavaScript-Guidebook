(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{248:function(t,a,s){t.exports=s.p+"assets/img/d9aa35df-ef6a-4c01-8394-f566ea72f090.9d41b0d3.png"},249:function(t,a,s){t.exports=s.p+"assets/img/552a5692-f05a-40d6-a81a-5a1f7324d12f.fd5354cd.png"},250:function(t,a,s){t.exports=s.p+"assets/img/c41b4489-4932-4763-9c17-905bdcc3db6d.21491193.png"},251:function(t,a,s){t.exports=s.p+"assets/img/1555247b-3951-4cbd-8024-3d61ed927b93.880844c2.png"},596:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"audio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#audio"}},[t._v("#")]),t._v(" Audio")]),t._v(" "),e("p",[t._v("HTML5 "),e("code",[t._v("<audio>")]),t._v(" 元素用于在文档中表示音频内容。")]),t._v(" "),e("p",[t._v("HTML5 音频 API 的主要框架和工作流程如下图，在 AudioContext 音频上下文中，把音频文件转成 buffer 格式，从音频源 source 开始，经过 AuidoNode 处理音频，最好到达 destination 输出音乐。这里形成了一个音频通道，每个模块通过 connect 方法链接并传送音频。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(248),alt:"AudioContext"}})]),t._v(" "),e("h2",{attrs:{id:"audiocontext"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#audiocontext"}},[t._v("#")]),t._v(" AudioContext")]),t._v(" "),e("p",[t._v("通过全局的 AudioContext 能获取当前网页音频上下文。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" audioContext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AudioContext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("webkitAudioContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("strong",[t._v("属性")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("属性")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("destination")]),t._v(" "),e("td",[t._v("返回 AudioDestinationNode 对象，表示 AudioContext 中所有节点的最终节点，一般表示音频渲染设备。")])])])]),t._v(" "),e("p",[e("strong",[t._v("方法")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("createBufferSource()")]),t._v(" "),e("td",[t._v("创建一个 AudioBufferSourceNode 对象，他可以通过 AudioBuffer 对象来播放和处理包含在内的音频数据。")])]),t._v(" "),e("tr",[e("td",[t._v("createGain()")]),t._v(" "),e("td",[t._v("创建一个 GainNode，它可以控制音频的总音量。")])]),t._v(" "),e("tr",[e("td",[t._v("createBiquadFilter()")]),t._v(" "),e("td",[t._v("创建一个 BiquadFilterNode，它代表一个双二阶滤波器，可以设置集中不同且常见滤波器类型：高通、低通、带通等。")])]),t._v(" "),e("tr",[e("td",[t._v("createOscillator()")]),t._v(" "),e("td",[t._v("创建一个 OscillatorNode，它表示一个周期性波形，基本上来说创造了一个音调。")])])])]),t._v(" "),e("h2",{attrs:{id:"音频转换成-buffer-格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#音频转换成-buffer-格式"}},[t._v("#")]),t._v(" 音频转换成 Buffer 格式")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("decodeAudioData()")]),t._v(" 方法把音频文件编译成 buffer 格式。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeAudioData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("audioContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" request "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseType "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arraybuffer'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      audioContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeAudioData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("buffer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error decoding file data: '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BufferLoader: XHR error'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" buffer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeAudioData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audioContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./sounds/music.mp3'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"audionode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#audionode"}},[t._v("#")]),t._v(" AudioNode")]),t._v(" "),e("p",[t._v("音频节点接口是一个音频处理模块。包括音频源，音频输出，中间处理模块。")]),t._v(" "),e("h3",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("connect()")]),t._v(" "),e("td",[t._v("链接两个 "),e("strong",[t._v("AudioNode")]),t._v(" 节点，把音频从一个 "),e("strong",[t._v("AudioNode")]),t._v(" 节点输出到另一个 "),e("strong",[t._v("AudioNode")]),t._v(" 节点，形成一个音频通道。")])]),t._v(" "),e("tr",[e("td",[t._v("disconnect()")]),t._v(" "),e("td",[t._v("把 "),e("strong",[t._v("AudioNode")]),t._v(" 节点与其他节点断开链接。")])])])]),t._v(" "),e("h3",{attrs:{id:"audiobuffersourcenode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#audiobuffersourcenode"}},[t._v("#")]),t._v(" AudioBufferSourceNode")]),t._v(" "),e("p",[t._v("音频源有多种，这里只介绍 "),e("strong",[t._v("buffer")]),t._v(" 的音频源，"),e("strong",[t._v("buffer")]),t._v(" 的音频源通过 "),e("strong",[t._v("AudioContext")]),t._v(" 接口的 "),e("strong",[t._v("createBufferSource")]),t._v(" 方法来创建。音频源节点继承 "),e("strong",[t._v("AudioNode")]),t._v(" 音频节点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let bufferSource = audioContext.createBufferSource();\n")])])]),e("p",[t._v("创建了 "),e("strong",[t._v("AudioBufferSourceNode")]),t._v(" 对象后，把 "),e("strong",[t._v("buffer")]),t._v(" 格式的音频数据赋值给 "),e("strong",[t._v("AudioBufferSourceNode")]),t._v(" 对象的 "),e("strong",[t._v("buffer")]),t._v(" 属性，此时音频已经传递到音频源，可以对音频进行处理或输出。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bufferSource.buffer = buffer;\n")])])]),e("p",[e("strong",[t._v("方法")])]),t._v(" "),e("p",[e("strong",[t._v("AudioBufferSourceNode.start(when[, duration])")])]),t._v(" "),e("p",[t._v("开始播放。")]),t._v(" "),e("ul",[e("li",[t._v("when：延迟播放时间，单位为秒。")]),t._v(" "),e("li",[t._v("offset：定位音频到第几秒开始播放。")]),t._v(" "),e("li",[t._v("duration：从开始播放结束时长，当经过设置秒数后自动结束音频播放。")])]),t._v(" "),e("p",[e("strong",[t._v("AudioBufferSourceNode.stop([when])")])]),t._v(" "),e("ul",[e("li",[t._v("when：延迟停止时间，单位为秒。")])]),t._v(" "),e("p",[t._v("停止播放，注意调用该方法后，无法再次调用 "),e("strong",[t._v("AudioBufferSourceNode.start")]),t._v(" 播放。")]),t._v(" "),e("h3",{attrs:{id:"audiodestinationnode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#audiodestinationnode"}},[t._v("#")]),t._v(" AudioDestinationNode")]),t._v(" "),e("p",[t._v("音频终点是通过 "),e("strong",[t._v("AudioContext")]),t._v(" 接口的 "),e("strong",[t._v("destination")]),t._v(" 属性访问的。音频终点继承 "),e("strong",[t._v("AudioNode")]),t._v(" 音频节点，")]),t._v(" "),e("p",[e("strong",[t._v("AudioDestinationNode")]),t._v(" 节点无法再把音频信息传递给下一个音频节点，即无法再链接其他音频节点，因为他已经是终点，没有输出，也可以理解为他自己就是输出。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let audioDestinationNode = audioContext.destination;\n")])])]),e("p",[t._v("此时我们有音频起点 "),e("strong",[t._v("AudioBufferSourceNode")]),t._v(" 和音频终点 "),e("strong",[t._v("AudioDestinationNode")]),t._v(" ，使用 "),e("strong",[t._v("AudioNode.connect()")]),t._v(" 方法把起点和终点链接起来，就形成了一条有输入输出的音频通道，可以把音频直接播放出来。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bufferSource.connect(audioDestinationNode);\n")])])]),e("p",[e("a",{attrs:{href:"https://codepen.io/leechikit/pen/KvaJRp",target:"_blank",rel:"noopener noreferrer"}},[t._v("戳我看栗子"),e("OutboundLink")],1),t._v("点击预览。")]),t._v(" "),e("h3",{attrs:{id:"gainnode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gainnode"}},[t._v("#")]),t._v(" GainNode")]),t._v(" "),e("p",[t._v("用于音量变化。它是一个 "),e("strong",[t._v("AudioNode")]),t._v(" 类型的音频处理模块。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let gainNode = audioContext.createGain();\n")])])]),e("p",[t._v("把音频源、音频输出和音频处理模块链接一起，形成可控制音量大小的音频。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bufferSource.connect(gainNode);\ngainNode.connect(audioDestinationNode);\n\nlet controlVolume = value => {\n    gainNode.gain.value = value);\n}\n\n// 两倍音量播放\ncontrolVolume(2);\n")])])]),e("p",[e("img",{attrs:{src:s(249),alt:"audiocontext2"}})]),t._v(" "),e("p",[e("a",{attrs:{href:"https://codepen.io/leechikit/pen/vJxewz",target:"_blank",rel:"noopener noreferrer"}},[t._v("戳我看栗子"),e("OutboundLink")],1),t._v("点击预览")]),t._v(" "),e("h3",{attrs:{id:"biquadfilternode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biquadfilternode"}},[t._v("#")]),t._v(" BiquadFilterNode")]),t._v(" "),e("p",[t._v("表示一个简单的低频滤波器，可控制声调。它是一个 "),e("strong",[t._v("AudioNode")]),t._v(" 类型的音频处理模块。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let filterNode = audioContext.createBiquadFilter();\n")])])]),e("p",[t._v("输出一个变调的音频：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bufferSource.connect(filterNode);\nfilterNode.connect(audioDestinationNode);\n\nlet controlFrequency = function(value) {\n    filterNode.frequency.value = value;\n}\n\n// 音频为1000变调\ncontrolFrequency(1000);\n")])])]),e("h2",{attrs:{id:"多个音频源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多个音频源"}},[t._v("#")]),t._v(" 多个音频源")]),t._v(" "),e("p",[t._v("在一个音频上下文中，可以有多个音频处理通道，即多个音频源同时输出。各个音频处理通道内的操作是独立的，不影响其他音频通道。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(250),alt:"audiocontext3"}})]),t._v(" "),e("p",[e("a",{attrs:{href:"https://codepen.io/leechikit/pen/KvWyPV",target:"_blank",rel:"noopener noreferrer"}},[t._v("戳我看栗子"),e("OutboundLink")],1),t._v("点击预览")]),t._v(" "),e("h2",{attrs:{id:"多个音频处理模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多个音频处理模块"}},[t._v("#")]),t._v(" 多个音频处理模块")]),t._v(" "),e("p",[t._v("一个音频源可以经过多个音频处理模块处理，音频处理模块叠加效果后输出。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(251),alt:"audiocontext4"}})]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("参考资料：")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000010561222",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5 音频 API Web Audio"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);